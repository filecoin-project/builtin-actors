name: Continuous integration

on:
  push:
    branches:
      - master
  pull_request:
  merge_group:

env:
  RUSTFLAGS: -Dwarnings
  CARGO_INCREMENTAL: 0 # Speeds up the build (no cache) and reduces disk space!

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    steps:
    - name: Checking out
      uses: actions/checkout@v3
    - name: Running rustfmt
      run: make rustfmt

  check-clippy:
    runs-on: ubuntu-latest
    steps:
    - name: Checking out
      uses: actions/checkout@v3
    - name: Running clippy
      run: make check

  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checking out
      uses: actions/checkout@v3
    - name: Running tests
      run: |
        cargo test --locked --all --no-fail-fast --exclude=fil_builtin_actors_bundle

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        network: [ 'mainnet', 'caterpillarnet', 'butterflynet', 'calibrationnet', 'devnet', 'testing', 'testing-fake-proofs' ]
    steps:
    - name: Checking out
      uses: actions/checkout@v3
    - name: Writing bundle
      env:
        BUILD_FIL_NETWORK: ${{ matrix.network }}
      run: |
        cargo run --locked -- -o output/builtin-actors.car
  coverage:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: Checking out
      uses: actions/checkout@v3
    - name: Put LLVM tools into the PATH
      run: echo "$(rustc --print sysroot)/lib/rustlib/x86_64-unknown-linux-gnu/bin" >> $GITHUB_PATH
    - name: Install demangler
      run: sudo apt-get install -y rustfilt
    - name: Create coverage report
      env:
        # Make sure that each run of an executable creates a new profile file,
        # with the default name they would override each other.
        LLVM_PROFILE_FILE: "%m.profraw"
        RUSTFLAGS: "-Cinstrument-coverage"
      run: cargo test --workspace --exclude fil_builtin_actors_bundle
    - name: Merge profiling data
      # Do *not* use sparse output. It leads to more lines that are not taken
      # into account at all
      run: llvm-profdata merge --output=default.profdata $(find . -name '*.profraw')
    - name: Create HTML coverage report
      # The compiled files contain the coverage information. From running the
      # tests we don't know what those files are called, hence use all files
      # from the `./target/debug/deps` directory which don't have an extension.
      run: |
        OBJECT_OPTIONS=($(find ./target/debug/deps/* -name '*' -not -name '*\.*' -printf ' --object %p'))
        # Create HTML report of this project, we don't care about coverage of
        # dependencies
        llvm-cov show --Xdemangler=rustfilt --show-expansions --show-line-counts-or-regions --ignore-filename-regex=".cargo|.rustup|/rustc|./tests/" --format=html --output-dir=./llvm-show --instr-profile=default.profdata ${OBJECT_OPTIONS[@]}
        # Create file to be uploaded to codecov
        llvm-cov export --ignore-filename-regex=".cargo|.rustup|/rustc|./tests" --format=lcov --instr-profile=default.profdata ${OBJECT_OPTIONS[@]} > lcov.info
    - name: Archive code coverage results
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage-report
        path: llvm-show/*
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@d9f34f8cd5cb3b3eb79b3e4b5dae3a16df499a70 # v3.1.1
      with:
        files: lcov.info
  # Lint shell scripts
  shellcheck:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Run shellcheck
      uses: ludeeus/action-shellcheck@1.1.0
  # Show WASM bundle size summary as a message in the pull request
  bundle-size:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checking out
      uses: actions/checkout@v3
    - name: Install Rust toolchain
      uses: ./.github/actions/rust-cargo-run
      with:
        command: version
        github_token: ${{ secrets.GITHUB_TOKEN }}
        save_cache: true
    - name: Generate bundle delta summary
      id: bundle-summary
      run: |
        echo 'bundle-summary<<EOF' >> $GITHUB_ENV
        make bundle-size | tail -n3 >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
    # Find a relevant comment from GH bot to update if there is one
    - name: Find Comment
      uses: peter-evans/find-comment@v2
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-regex: "^### WASM bundle summary"
    - name: Create or update comment
      uses: peter-evans/create-or-update-comment@v2
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ### WASM bundle summary ðŸ“¦
          ```
          ${{ env.bundle-summary }}
          ```
        edit-mode: replace
